You can't create a vector of an abstract class type because you cannot create 
instances of an abstract class, and C++ Standard Library containers like 
std::vector store values (i.e. instances). If you want to do this, you will 
have to create a vector of pointers to the abstract class type.

Your workround would not work because virtual functions (which is why you want 
the abstract class in the first place) only work when called through pointers 
or references. You cannot create vectors of references either, so this is a 
second reason why you must use a vector of pointers.

(My first try was using an vector container to store the abstract class type, 
but it didn't work. I think it's because the abstract class type is not a real 
type, so it can't be stored in a vector container.)

-> Did it with vector!!

You can use a pointer to the abstract class type as the vector element type,
and then when you want to reference something from the class (like checking the
name for one), you can use the pointer to access the class, the difference is 
basically the struct or struct* way of accessing.